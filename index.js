const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');
const FormData = require('form-data');

let CONFIG = {};

function getKrasnoyarskDate() {
    const now = new Date();
    const krasnoyarskOffset = 7 * 60;
    const localOffset = now.getTimezoneOffset();
    const krasnoyarskTime = new Date(now.getTime() + (krasnoyarskOffset + localOffset) * 60000);
    return krasnoyarskTime;
}

function getKrasnoyarskDateString() {
    return getKrasnoyarskDate().toISOString().split('T')[0];
}

function formatKrasnoyarskDate() {
    const date = getKrasnoyarskDate();
    return date.toLocaleDateString('ru-RU', {
        timeZone: 'Asia/Krasnoyarsk',
        day: 'numeric',
        month: 'long'
    });
}

function getFormattedKrasnoyarskDate() {
    const date = getKrasnoyarskDate();
    return date.toLocaleDateString('ru-RU', {
        timeZone: 'Asia/Krasnoyarsk',
        day: 'numeric',
        month: 'long',
        year: 'numeric'
    });
}

async function loadConfig() {
    try {
        const data = await fs.readFile('config.json', 'utf8');
        CONFIG = JSON.parse(data);
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ config.json');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
        return false;
    }
}

async function checkAndCreateLock() {
    const todayFormatted = getFormattedKrasnoyarskDate();
    
    try {
        let lockContent;
        try {
            lockContent = await fs.readFile(CONFIG.lockFile, 'utf8');
        } catch (error) {
            if (error.code === 'ENOENT') {
                await fs.writeFile(CONFIG.lockFile, todayFormatted, 'utf8');
                console.log(`‚úÖ –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–∑–¥–∞–Ω: ${todayFormatted}`);
                return true;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error.message);
                return false;
            }
        }

        if (lockContent.trim() === todayFormatted) {
            console.log(`‚ùå –°–∫—Ä–∏–ø—Ç —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω —Å–µ–≥–æ–¥–Ω—è (${todayFormatted}). –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–ø—Ä–µ—â–µ–Ω.`);
            return false;
        } else {
            await fs.writeFile(CONFIG.lockFile, todayFormatted, 'utf8');
            console.log(`‚úÖ –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: ${todayFormatted}`);
            return true;
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error.message);
        return false;
    }
}

async function getGroupId(groupId) {
    try {
        if (groupId.startsWith('-')) {
            return groupId;
        }

        const response = await axios.get('https://api.vk.com/method/groups.getById', {
            params: {
                group_ids: groupId,
                access_token: CONFIG.accessToken,
                v: CONFIG.apiVersion
            }
        });

        if (response.data.error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥—Ä—É–ø–ø—ã: ${response.data.error.error_msg}`);
        }

        const groupInfo = response.data?.response?.groups?.[0];
        
        if (!groupInfo) {
            throw new Error('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å groupId.');
        }

        return `-${groupInfo.id}`;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –≥—Ä—É–ø–ø—ã:', error.message);
        throw error;
    }
}

async function getAllGroupMembers(groupId) {
    let allMembers = [];
    let offset = 0;
    const count = 1000;

    try {
        while (true) {
            const response = await axios.get('https://api.vk.com/method/groups.getMembers', {
                params: {
                    group_id: groupId,
                    fields: 'bdate,first_name,last_name',
                    offset: offset,
                    count: count,
                    access_token: CONFIG.accessToken,
                    v: CONFIG.apiVersion
                }
            });

            if (response.data.error) {
                throw new Error(`–û—à–∏–±–∫–∞ API: ${response.data.error.error_msg}`);
            }

            const members = response.data.response.items;
            allMembers = allMembers.concat(members);

            if (members.length === 0 || offset + count >= response.data.response.count) {
                break;
            }

            offset += count;
            await new Promise(resolve => setTimeout(resolve, 500));
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error.message);
        throw error;
    }

    return allMembers;
}

function isBirthdayToday(bdate) {
    if (!bdate) return false;

    const dateParts = bdate.split('.');
    if (dateParts.length < 2) return false;

    const today = getKrasnoyarskDate();
    const userDay = parseInt(dateParts[0]);
    const userMonth = parseInt(dateParts[1]) - 1;

    return today.getDate() === userDay && today.getMonth() === userMonth;
}

function createCongratulationsPost(birthdayPeople) {
    const formattedDate = formatKrasnoyarskDate();

    let postText = `üéâ ${formattedDate}\n\n–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω—É—é—Ç:\n\n`;

    if (birthdayPeople.length === 0) {
        postText = `üìÖ ${formattedDate}\n\n–°–µ–≥–æ–¥–Ω—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–µ—Ç üòî`;
    } else {
        birthdayPeople.forEach((person) => {
            postText += `@id${person.id} (${person.first_name} ${person.last_name})\n`;
        });
        
        postText += '\nüíê –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!\n';
        postText += 'üéÇ –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ —É—Å–ø–µ—Ö–æ–≤!';
    }

    return postText;
}

async function getImageFromGoogleSearch() {
    try {
        if (!CONFIG.googleSearch.apiKey || !CONFIG.googleSearch.searchEngineId) {
            console.log('‚ö†Ô∏è API –∫–ª—é—á –∏–ª–∏ ID –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ config.json');
            return null;
        }

        const searchUrl = 'https://www.googleapis.com/customsearch/v1';
        const params = {
            key: CONFIG.googleSearch.apiKey,
            cx: CONFIG.googleSearch.searchEngineId,
            q: CONFIG.googleSearch.query || '–∫—Ä–∞—Å–∏–≤—ã–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è',
            searchType: 'image',
            imgSize: 'large',
            num: 10,
            safe: 'active'
        };

        console.log(`üîç –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${params.q}"`);
        
        const response = await axios.get(searchUrl, {
            params: params,
            timeout: 15000
        });

        if (!response.data.items || response.data.items.length === 0) {
            console.log('‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
            return null;
        }

        const randomIndex = Math.floor(Math.random() * response.data.items.length);
        const imageUrl = response.data.items[randomIndex].link;
        
        console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${new URL(imageUrl).hostname}`);

        const imageResponse = await axios({
            method: 'GET',
            url: imageUrl,
            responseType: 'arraybuffer',
            timeout: 15000,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
        });

        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ Google Search');
        return Buffer.from(imageResponse.data);
        
    } catch (error) {
        if (error.response && error.response.status === 429) {
            console.log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Google API');
        } else if (error.response) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ Google API: ${error.response.status} - ${error.response.data.error?.message}`);
        } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ Google: ${error.message}`);
        }
        return null;
    }
}

async function getImageFromLocalFolder() {
    try {
        const imagesDir = path.join(__dirname, 'images');
        
        const files = await fs.readdir(imagesDir);
        
        const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp'];
        const imageFiles = files.filter(file => 
            imageExtensions.includes(path.extname(file).toLowerCase())
        );

        if (imageFiles.length === 0) {
            console.log('‚ùå –í –ø–∞–ø–∫–µ images –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
            return null;
        }

        const randomImage = imageFiles[Math.floor(Math.random() * imageFiles.length)];
        const imagePath = path.join(imagesDir, randomImage);
        
        console.log(`üñº –í—ã–±—Ä–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${randomImage}`);
        
        const imageBuffer = await fs.readFile(imagePath);
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏');
        return imageBuffer;
        
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.log('‚ùå –ü–∞–ø–∫–∞ images –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.message);
        }
        return null;
    }
}

async function createImageBuffer() {
    if (CONFIG.googleSearch && CONFIG.googleSearch.enable) {
        console.log('üîç –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Search...');
        const googleImageBuffer = await getImageFromGoogleSearch();
        if (googleImageBuffer) {
            return googleImageBuffer;
        }
        
        if (CONFIG.googleSearch.fallbackToLocal !== false) {
            console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        }
    }

    return await getImageFromLocalFolder();
}

async function publishPostToGroup(ownerId, postText, imageBuffer) {
    let attachments = '';

    try {
        if (imageBuffer) {
            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä VK...');
            
            const uploadServerResponse = await axios.get(
                'https://api.vk.com/method/photos.getWallUploadServer', {
                    params: {
                        group_id: Math.abs(parseInt(ownerId)),
                        access_token: CONFIG.accessToken,
                        v: CONFIG.apiVersion
                    }
                }
            );

            if (uploadServerResponse.data.error) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${uploadServerResponse.data.error.error_msg}`);
            }

            const uploadServer = uploadServerResponse.data.response;
            
            const formData = new FormData();
            formData.append('photo', imageBuffer, {
                filename: 'birthday.jpg',
                contentType: 'image/jpeg'
            });

            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä VK...');
            const uploadResponse = await axios.post(
                uploadServer.upload_url,
                formData,
                {
                    headers: {
                        ...formData.getHeaders()
                    },
                    timeout: 30000
                }
            );

            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º –≥—Ä—É–ø–ø—ã...');
            const saveResponse = await axios.get(
                'https://api.vk.com/method/photos.saveWallPhoto', {
                    params: {
                        group_id: Math.abs(parseInt(ownerId)),
                        server: uploadResponse.data.server,
                        photo: uploadResponse.data.photo,
                        hash: uploadResponse.data.hash,
                        access_token: CONFIG.accessToken,
                        v: CONFIG.apiVersion
                    }
                }
            );

            if (saveResponse.data.error) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: ${saveResponse.data.error.error_msg}`);
            }

            const photo = saveResponse.data.response[0];
            attachments = `photo${photo.owner_id}_${photo.id}`;
            console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ VK –ø—Ä—è–º–æ –∏–∑ –ø–∞–º—è—Ç–∏');
        }

        const postParams = {
            owner_id: ownerId,
            from_group: CONFIG.fromGroup,
            message: postText,
            access_token: CONFIG.accessToken,
            v: CONFIG.apiVersion
        };

        if (attachments) {
            postParams.attachments = attachments;
        }

        console.log('üìù –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç...');
        const response = await axios.post(
            'https://api.vk.com/method/wall.post',
            new URLSearchParams(postParams),
            {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                timeout: 15000
            }
        );

        if (response.data.error) {
            throw new Error(`–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${response.data.error.error_msg}`);
        }

        console.log('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø—É!');
        return response.data.response;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:', error.message);
        
        console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        try {
            const postParams = {
                owner_id: ownerId,
                from_group: CONFIG.fromGroup,
                message: postText,
                access_token: CONFIG.accessToken,
                v: CONFIG.apiVersion
            };

            const response = await axios.post(
                'https://api.vk.com/method/wall.post',
                new URLSearchParams(postParams),
                {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    timeout: 15000
                }
            );

            if (response.data.error) {
                throw new Error(`–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${response.data.error.error_msg}`);
            }

            console.log('‚úÖ –ü–æ—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!');
            return response.data.response;
        } catch (fallbackError) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –¥–∞–∂–µ –ø–æ—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', fallbackError.message);
            throw error;
        }
    }
}

async function resetLock() {
    try {
        await fs.access(CONFIG.lockFile);
        const lockContent = await fs.readFile(CONFIG.lockFile, 'utf8');
        await fs.unlink(CONFIG.lockFile);
        console.log(`‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ (–±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: ${lockContent.trim()})`);
    } catch (error) {
        console.log('‚ÑπÔ∏è –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
}

async function showLockStatus() {
    try {
        const lockContent = await fs.readFile(CONFIG.lockFile, 'utf8');
        const todayFormatted = getFormattedKrasnoyarskDate();
        
        console.log(`üìÖ –î–∞—Ç–∞ –≤ lock —Ñ–∞–π–ª–µ: ${lockContent.trim()}`);
        console.log(`üåè –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: ${todayFormatted}`);
        
        if (lockContent.trim() === todayFormatted) {
            console.log('üîí –°–∫—Ä–∏–ø—Ç —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è');
        } else {
            console.log('üîì –°–∫—Ä–∏–ø—Ç —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è');
        }
    } catch (error) {
        console.log('‚ÑπÔ∏è –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
}

async function showHelp() {
    console.log(`
üéÇ VK Birthday Bot - –ü–æ–º–æ—â—å

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node index.js           - –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
  node index.js --reset   - –°–±—Ä–æ—Å–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
  node index.js --status  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  node index.js --help    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–û–ø–∏—Å–∞–Ω–∏–µ:
  –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
  –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –Ω–∞ —Å—Ç–µ–Ω—É –≥—Ä—É–ø–ø—ã.
  –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+7).

  –¢–µ–∫—É—â–µ–µ –∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–µ –≤—Ä–µ–º—è: ${getKrasnoyarskDate().toLocaleString('ru-RU', {timeZone: 'Asia/Krasnoyarsk'})}
    `);
}

async function main() {
    if (!(await loadConfig())) {
        return;
    }

    if (process.argv.includes('--reset')) {
        await resetLock();
        return;
    }

    if (process.argv.includes('--status')) {
        await showLockStatus();
        return;
    }

    if (process.argv.includes('--help') || process.argv.includes('-h')) {
        await showHelp();
        return;
    }

    console.log(`üåè –¢–µ–∫—É—â–µ–µ –∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–µ –≤—Ä–µ–º—è: ${getKrasnoyarskDate().toLocaleString('ru-RU', {timeZone: 'Asia/Krasnoyarsk'})}`);

    if (!(await checkAndCreateLock())) {
        return;
    }

    console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –≥—Ä—É–ø–ø—ã...');
    const numericGroupId = await getGroupId(CONFIG.groupId);
    console.log(`‚úÖ ID –≥—Ä—É–ø–ø—ã: ${numericGroupId}`);

    console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã...');
    const members = await getAllGroupMembers(CONFIG.groupId);
    console.log(`‚úÖ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${members.length}`);

    const birthdayPeople = members.filter(member => isBirthdayToday(member.bdate));

    console.log('\nüéÇ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:');
    if (birthdayPeople.length === 0) {
        console.log('–ò–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–µ—Ç üòî');
    } else {
        birthdayPeople.forEach(person => {
            console.log(`- @id${person.id} (${person.first_name} ${person.last_name})`);
        });
    }

    console.log('\nüìù –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏...');
    const postText = createCongratulationsPost(birthdayPeople);
    
    console.log('\nüñº –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
    const imageBuffer = await createImageBuffer();
    
    console.log('\nüìã –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:');
    console.log('---');
    console.log(postText);
    console.log('---');
    
    try {
        await publishPostToGroup(numericGroupId, postText, imageBuffer);
    } catch (error) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç');
        return;
    }

    return birthdayPeople;
}

process.on('unhandledRejection', (error) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
    process.exit(1);
});

main()
    .then(() => {
        console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É');
        console.log(`üåè –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${getKrasnoyarskDate().toLocaleString('ru-RU', {timeZone: 'Asia/Krasnoyarsk'})}`);
    })
    .catch(error => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });

